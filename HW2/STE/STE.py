from Crypto.Util.number import *

def pad(data, block_size):
    return b'\x00' + b'\xff' * (block_size - 2 - len(data)) + b'\x00' + data

mbar = bytes_to_long(pad(b'\x00' * 16, 128))
#702223880805592151456759840151962786569522257399338504974336254522393264865238137237142489540654437582500444843247630303354647534431314931612685275935445798350655833690880801860555545317367555154113605281582053784524026102900245630757473088050106395169337932361665140387507997686939745191863608129932492800

#STE.sage

n = 702223880805592151456759840151962786569522257399338504974336254522393264865238137237142489540654437582500444843247630303354647534431314931612685275935445798350655833690880801860555545317367555154113605281582053784524026102900245630757473088050106395169337932361665140480949895973081456986702895095875854717
flag = n.to_bytes(128, byteorder="big")
pos = 0
for i in range(len(flag)):
    if flag[i] == 0:
        pos = i + 1
flag = flag[pos:].decode()
print(flag)